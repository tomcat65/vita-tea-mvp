rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }
    
    function isValidEmail(email) {
      return email is string && email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    function isValidUserData() {
      return request.resource.data.keys().hasAll(['uid', 'email', 'role', 'createdAt', 'updatedAt']) &&
        request.resource.data.uid is string &&
        isValidEmail(request.resource.data.email) &&
        request.resource.data.role in ['customer', 'admin'] &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.updatedAt is timestamp;
    }
    
    // Rate limiting - ensure at least 1 second between writes
    function rateLimit() {
      return !exists(request.path) || request.time > resource.data.updatedAt + duration.value(1, 's');
    }
    
    // Products collection - read access for all, write for authenticated admins only
    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Certifications collection - read access for all, write for authenticated admins
    match /certifications/{certificationId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // User data - only authenticated users can access their own data
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId) && isValidUserData() && request.resource.data.role == 'customer';
      allow update: if isOwner(userId) && isValidUserData() && rateLimit() &&
        // Users can't change their role or uid
        request.resource.data.role == resource.data.role &&
        request.resource.data.uid == resource.data.uid;
      allow delete: if false; // Users cannot be deleted through client SDK
    }
    
    // Cart data - users can only access their own cart
    match /carts/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) && rateLimit();
    }
    
    // Orders - users can read their own orders, write requires authentication
    match /orders/{orderId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isSignedIn() && 
        request.auth.uid == request.resource.data.userId &&
        request.resource.data.keys().hasAll(['userId', 'items', 'total', 'status', 'createdAt']);
      allow update: if isAdmin() || 
        (isOwner(resource.data.userId) && request.resource.data.status == 'cancelled');
      allow delete: if false; // Orders cannot be deleted
    }
    
    // Auth attempts tracking for rate limiting (server-side would be better)
    match /authAttempts/{attemptId} {
      allow read: if false;
      allow write: if false; // Only server-side functions should write
    }
  }
}
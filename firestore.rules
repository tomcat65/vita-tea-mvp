rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }
    
    function isValidEmail(email) {
      return email is string && email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    function isValidUserData() {
      return request.resource.data.keys().hasAll(['uid', 'email', 'role', 'createdAt', 'updatedAt']) &&
        request.resource.data.uid is string &&
        isValidEmail(request.resource.data.email) &&
        request.resource.data.role in ['customer', 'admin'] &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.updatedAt is timestamp;
    }
    
    // Rate limiting - ensure at least 1 second between writes
    function rateLimit() {
      return !exists(request.path) || request.time > resource.data.updatedAt + duration.value(1, 's');
    }
    
    // Validate product data
    function isValidProduct(product) {
      return product.keys().hasAll(['name', 'price', 'category']) &&
             product.price is int &&
             product.price > 0 &&
             product.category in ['digestive', 'stress-relief', 'immunity'];
    }
    
    // Validate cart data
    function isValidCart(cart) {
      return cart.keys().hasAll(['items', 'updatedAt']) &&
             cart.items is list;
    }
    
    // Validate address data
    function isValidAddress(address) {
      return address.keys().hasAll(['userId', 'type', 'fullName', 'addressLine1', 'city', 'state', 'zipCode', 'country', 'phone']) &&
             address.type in ['shipping', 'billing'] &&
             address.fullName is string &&
             address.addressLine1 is string &&
             address.city is string &&
             address.state is string &&
             address.zipCode is string &&
             address.country is string &&
             address.phone is string;
    }
    
    // Validate order status
    function isValidOrderStatus(status) {
      return status in ['pending', 'processing', 'shipped', 'delivered', 'cancelled', 'refunded'];
    }
    
    // Validate order data
    function isValidOrder(order) {
      return order.keys().hasAll(['orderId', 'orderNumber', 'userId', 'status', 'items', 'shippingAddress', 'billingAddress', 'subtotal', 'tax', 'shipping', 'total', 'createdAt']) &&
             order.items is list &&
             order.items.size() > 0 &&
             order.subtotal is int && order.subtotal >= 0 &&
             order.tax is int && order.tax >= 0 &&
             order.shipping is int && order.shipping >= 0 &&
             order.total is int && order.total > 0 &&
             isValidOrderStatus(order.status);
    }
    
    // Products collection - public read for active products, admin write
    match /products/{productId} {
      allow read: if !exists(request.path) || resource.data.isActive == true || isAdmin();
      allow create: if isAdmin() && isValidProduct(request.resource.data);
      allow update: if isAdmin() && isValidProduct(request.resource.data) && rateLimit();
      allow delete: if isAdmin();
    }
    
    // Certifications collection - read access for all, write for authenticated admins
    match /certifications/{certificationId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // User data - only authenticated users can access their own data
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId) && isValidUserData() && request.resource.data.role == 'customer';
      allow update: if isOwner(userId) && isValidUserData() && rateLimit() &&
        // Users can't change their role or uid
        request.resource.data.role == resource.data.role &&
        request.resource.data.uid == resource.data.uid;
      allow delete: if false; // Users cannot be deleted through client SDK
    }
    
    // Cart data - users can only access their own cart with validation
    match /carts/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && isValidCart(request.resource.data);
      allow update: if isOwner(userId) && isValidCart(request.resource.data) && rateLimit();
      allow delete: if isOwner(userId);
    }
    
    // Orders - users read own, admin manages all, validated data
    match /orders/{orderId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if false; // Orders created via Cloud Functions only
      allow update: if isAdmin() && isValidOrder(request.resource.data) && rateLimit();
      allow delete: if false; // Orders cannot be deleted
    }
    
    // Auth attempts tracking for rate limiting (server-side would be better)
    match /authAttempts/{attemptId} {
      allow read: if false;
      allow write: if false; // Only server-side functions should write
    }
    
    // Addresses collection - users manage their own addresses
    match /addresses/{addressId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isOwner(request.resource.data.userId) && isValidAddress(request.resource.data);
      allow update: if isOwner(resource.data.userId) && isValidAddress(request.resource.data) && 
        request.resource.data.userId == resource.data.userId && rateLimit();
      allow delete: if isOwner(resource.data.userId);
    }
    
    // Inventory logs - admin only access
    match /inventoryLogs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Created via Cloud Functions only
    }
    
    // Order events - read by order owner or admin, write via functions only
    match /orderEvents/{eventId} {
      allow read: if isAdmin() || (isSignedIn() && exists(/databases/$(database)/documents/orders/$(resource.data.orderId)) && 
        get(/databases/$(database)/documents/orders/$(resource.data.orderId)).data.userId == request.auth.uid);
      allow write: if false; // Created via Cloud Functions only
    }
    
    // Analytics collection - write via functions, admin read
    match /analytics/{eventId} {
      allow read: if isAdmin();
      allow write: if false; // Created via Cloud Functions only
    }
  }
}